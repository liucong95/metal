// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: gzone.proto

package protocol

import (
	"context"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// GZoneHttpService defines service
type GZoneHttpService interface {
	Login(ctx context.Context, req *LoginReq, rsp *LoginRsp) (err error)

	SetZoneProfile(ctx context.Context, req *SetZoneProfileReq, rsp *SetZoneProfileRsp) (err error)

	SetZoneConfig(ctx context.Context, req *SetZoneConfigReq, rsp *SetZoneConfigRsp) (err error)

	GetProfile(ctx context.Context, req *GetProfileReq, rsp *GetProfileRsp) (err error)

	PostMoment(ctx context.Context, req *PostMomentReq, rsp *PostMomentRsp) (err error)

	GetMomentList(ctx context.Context, req *GetMomentListReq, rsp *GetMomentListRsp) (err error)

	DelMoment(ctx context.Context, req *DelMomentReq, rsp *DelMomentRsp) (err error)

	GetMomentByID(ctx context.Context, req *GetMomentByIdReq, rsp *GetMomentByIdRsp) (err error)

	PostComment(ctx context.Context, req *PostCommentReq, rsp *PostCommentRsp) (err error)

	DelComment(ctx context.Context, req *DelCommentReq, rsp *DelCommentRsp) (err error)

	GetCommentList(ctx context.Context, req *GetCommentListReq, rsp *GetCommentListRsp) (err error)

	PostMessage(ctx context.Context, req *PostMessageReq, rsp *PostMessageRsp) (err error)

	DelMessage(ctx context.Context, req *DelMessageReq, rsp *DelMessageRsp) (err error)

	GetMessageList(ctx context.Context, req *GetMessageListReq, rsp *GetMessageListRsp) (err error)

	DoLike(ctx context.Context, req *DoLikeReq, rsp *DoLikeRsp) (err error)

	DoStep(ctx context.Context, req *DoStepReq, rsp *DoStepRsp) (err error)

	GetVisitorList(ctx context.Context, req *GetVisiterListReq, rsp *GetVisiterListRsp) (err error)

	GetRankList(ctx context.Context, req *GetRankListReq, rsp *GetRankListRsp) (err error)

	GetTopicList(ctx context.Context, req *GetTopicListReq, rsp *GetTopicListRsp) (err error)

	SetAttention(ctx context.Context, req *SetAttentionReq, rsp *SetAttentionRsp) (err error)

	SetBlackList(ctx context.Context, req *SetBlackListReq, rsp *SetBlackListRsp) (err error)

	GetRelationList(ctx context.Context, req *GetRelationListReq, rsp *GetRelationListRsp) (err error)

	GetUndealMsgCount(ctx context.Context, req *GetUndealMsgCountReq, rsp *GetUndealMsgCountRsp) (err error)

	GetUndealMsg(ctx context.Context, req *GetUndealMsgReq, rsp *GetUndealMsgRsp) (err error)

	ClearUndealMsg(ctx context.Context, req *ClearUndealMsgReq, rsp *ClearUndealMsgRsp) (err error)
}

func GZoneHttpService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &LoginReq{}
	rsp := &LoginRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).Login(ctx, reqbody.(*LoginReq), rspbody.(*LoginRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_SetZoneProfile_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetZoneProfileReq{}
	rsp := &SetZoneProfileRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).SetZoneProfile(ctx, reqbody.(*SetZoneProfileReq), rspbody.(*SetZoneProfileRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_SetZoneConfig_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetZoneConfigReq{}
	rsp := &SetZoneConfigRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).SetZoneConfig(ctx, reqbody.(*SetZoneConfigReq), rspbody.(*SetZoneConfigRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetProfile_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetProfileReq{}
	rsp := &GetProfileRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetProfile(ctx, reqbody.(*GetProfileReq), rspbody.(*GetProfileRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_PostMoment_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &PostMomentReq{}
	rsp := &PostMomentRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).PostMoment(ctx, reqbody.(*PostMomentReq), rspbody.(*PostMomentRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetMomentList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetMomentListReq{}
	rsp := &GetMomentListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetMomentList(ctx, reqbody.(*GetMomentListReq), rspbody.(*GetMomentListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_DelMoment_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DelMomentReq{}
	rsp := &DelMomentRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).DelMoment(ctx, reqbody.(*DelMomentReq), rspbody.(*DelMomentRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetMomentByID_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetMomentByIdReq{}
	rsp := &GetMomentByIdRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetMomentByID(ctx, reqbody.(*GetMomentByIdReq), rspbody.(*GetMomentByIdRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_PostComment_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &PostCommentReq{}
	rsp := &PostCommentRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).PostComment(ctx, reqbody.(*PostCommentReq), rspbody.(*PostCommentRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_DelComment_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DelCommentReq{}
	rsp := &DelCommentRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).DelComment(ctx, reqbody.(*DelCommentReq), rspbody.(*DelCommentRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetCommentList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetCommentListReq{}
	rsp := &GetCommentListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetCommentList(ctx, reqbody.(*GetCommentListReq), rspbody.(*GetCommentListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_PostMessage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &PostMessageReq{}
	rsp := &PostMessageRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).PostMessage(ctx, reqbody.(*PostMessageReq), rspbody.(*PostMessageRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_DelMessage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DelMessageReq{}
	rsp := &DelMessageRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).DelMessage(ctx, reqbody.(*DelMessageReq), rspbody.(*DelMessageRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetMessageList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetMessageListReq{}
	rsp := &GetMessageListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetMessageList(ctx, reqbody.(*GetMessageListReq), rspbody.(*GetMessageListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_DoLike_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DoLikeReq{}
	rsp := &DoLikeRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).DoLike(ctx, reqbody.(*DoLikeReq), rspbody.(*DoLikeRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_DoStep_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DoStepReq{}
	rsp := &DoStepRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).DoStep(ctx, reqbody.(*DoStepReq), rspbody.(*DoStepRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetVisitorList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetVisiterListReq{}
	rsp := &GetVisiterListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetVisitorList(ctx, reqbody.(*GetVisiterListReq), rspbody.(*GetVisiterListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetRankList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetRankListReq{}
	rsp := &GetRankListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetRankList(ctx, reqbody.(*GetRankListReq), rspbody.(*GetRankListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetTopicList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetTopicListReq{}
	rsp := &GetTopicListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetTopicList(ctx, reqbody.(*GetTopicListReq), rspbody.(*GetTopicListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_SetAttention_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetAttentionReq{}
	rsp := &SetAttentionRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).SetAttention(ctx, reqbody.(*SetAttentionReq), rspbody.(*SetAttentionRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_SetBlackList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetBlackListReq{}
	rsp := &SetBlackListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).SetBlackList(ctx, reqbody.(*SetBlackListReq), rspbody.(*SetBlackListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetRelationList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetRelationListReq{}
	rsp := &GetRelationListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetRelationList(ctx, reqbody.(*GetRelationListReq), rspbody.(*GetRelationListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetUndealMsgCount_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetUndealMsgCountReq{}
	rsp := &GetUndealMsgCountRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetUndealMsgCount(ctx, reqbody.(*GetUndealMsgCountReq), rspbody.(*GetUndealMsgCountRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_GetUndealMsg_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetUndealMsgReq{}
	rsp := &GetUndealMsgRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).GetUndealMsg(ctx, reqbody.(*GetUndealMsgReq), rspbody.(*GetUndealMsgRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpService_ClearUndealMsg_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &ClearUndealMsgReq{}
	rsp := &ClearUndealMsgRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpService).ClearUndealMsg(ctx, reqbody.(*ClearUndealMsgReq), rspbody.(*ClearUndealMsgRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// GZoneHttpServer_ServiceDesc descriptor for server.RegisterService
var GZoneHttpServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "rstudio.gzone.GZoneHttp",
	HandlerType: ((*GZoneHttpService)(nil)),
	Methods:     []server.Method{{Name: "/rstudio.gzone.GZoneHttp/Login", Func: GZoneHttpService_Login_Handler}, {Name: "/rstudio.gzone.GZoneHttp/SetZoneProfile", Func: GZoneHttpService_SetZoneProfile_Handler}, {Name: "/rstudio.gzone.GZoneHttp/SetZoneConfig", Func: GZoneHttpService_SetZoneConfig_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetProfile", Func: GZoneHttpService_GetProfile_Handler}, {Name: "/rstudio.gzone.GZoneHttp/PostMoment", Func: GZoneHttpService_PostMoment_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetMomentList", Func: GZoneHttpService_GetMomentList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/DelMoment", Func: GZoneHttpService_DelMoment_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetMomentByID", Func: GZoneHttpService_GetMomentByID_Handler}, {Name: "/rstudio.gzone.GZoneHttp/PostComment", Func: GZoneHttpService_PostComment_Handler}, {Name: "/rstudio.gzone.GZoneHttp/DelComment", Func: GZoneHttpService_DelComment_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetCommentList", Func: GZoneHttpService_GetCommentList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/PostMessage", Func: GZoneHttpService_PostMessage_Handler}, {Name: "/rstudio.gzone.GZoneHttp/DelMessage", Func: GZoneHttpService_DelMessage_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetMessageList", Func: GZoneHttpService_GetMessageList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/DoLike", Func: GZoneHttpService_DoLike_Handler}, {Name: "/rstudio.gzone.GZoneHttp/DoStep", Func: GZoneHttpService_DoStep_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetVisitorList", Func: GZoneHttpService_GetVisitorList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetRankList", Func: GZoneHttpService_GetRankList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetTopicList", Func: GZoneHttpService_GetTopicList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/SetAttention", Func: GZoneHttpService_SetAttention_Handler}, {Name: "/rstudio.gzone.GZoneHttp/SetBlackList", Func: GZoneHttpService_SetBlackList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetRelationList", Func: GZoneHttpService_GetRelationList_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetUndealMsgCount", Func: GZoneHttpService_GetUndealMsgCount_Handler}, {Name: "/rstudio.gzone.GZoneHttp/GetUndealMsg", Func: GZoneHttpService_GetUndealMsg_Handler}, {Name: "/rstudio.gzone.GZoneHttp/ClearUndealMsg", Func: GZoneHttpService_ClearUndealMsg_Handler}},
}

// RegisterGZoneHttpService register service
func RegisterGZoneHttpService(s server.Service, svr GZoneHttpService) {
	s.Register(&GZoneHttpServer_ServiceDesc, svr)
}

// GZoneHttpInnerService defines service
type GZoneHttpInnerService interface {
	Register(ctx context.Context, req *RegisterReq, rsp *RegisterRsp) (err error)

	CreateOfficialAcount(ctx context.Context, req *CreateOfficialAcountReq, rsp *CreateOfficialAcountRsp) (err error)

	GetOfficialAcountList(ctx context.Context, req *GetOfficialAcountListReq, rsp *GetOfficialAcountListRsp) (err error)

	SetGameProfile(ctx context.Context, req *SetGameProfileReq, rsp *SetGameProfileRsp) (err error)

	SyncFriendList(ctx context.Context, req *SyncFriendListReq, rsp *SyncFriendListRsp) (err error)

	SetGlobalZoneConfig(ctx context.Context, req *SetGlobalZoneConfigReq, rsp *SetGlobalZoneConfigRsp) (err error)

	SetTopicInfo(ctx context.Context, req *SetTopicInfoReq, rsp *SetTopicInfoRsp) (err error)

	DelTopic(ctx context.Context, req *DelTopicReq, rsp *DelTopicRsp) (err error)

	GetTopicList(ctx context.Context, req *GetTopicListReq, rsp *GetTopicListRsp) (err error)

	ClearAllData(ctx context.Context, req *ClearAllDataReq, rsp *ClearAllDataRsp) (err error)
}

func GZoneHttpInnerService_Register_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &RegisterReq{}
	rsp := &RegisterRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).Register(ctx, reqbody.(*RegisterReq), rspbody.(*RegisterRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_CreateOfficialAcount_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &CreateOfficialAcountReq{}
	rsp := &CreateOfficialAcountRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).CreateOfficialAcount(ctx, reqbody.(*CreateOfficialAcountReq), rspbody.(*CreateOfficialAcountRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_GetOfficialAcountList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetOfficialAcountListReq{}
	rsp := &GetOfficialAcountListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).GetOfficialAcountList(ctx, reqbody.(*GetOfficialAcountListReq), rspbody.(*GetOfficialAcountListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_SetGameProfile_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetGameProfileReq{}
	rsp := &SetGameProfileRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).SetGameProfile(ctx, reqbody.(*SetGameProfileReq), rspbody.(*SetGameProfileRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_SyncFriendList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SyncFriendListReq{}
	rsp := &SyncFriendListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).SyncFriendList(ctx, reqbody.(*SyncFriendListReq), rspbody.(*SyncFriendListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_SetGlobalZoneConfig_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetGlobalZoneConfigReq{}
	rsp := &SetGlobalZoneConfigRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).SetGlobalZoneConfig(ctx, reqbody.(*SetGlobalZoneConfigReq), rspbody.(*SetGlobalZoneConfigRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_SetTopicInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &SetTopicInfoReq{}
	rsp := &SetTopicInfoRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).SetTopicInfo(ctx, reqbody.(*SetTopicInfoReq), rspbody.(*SetTopicInfoRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_DelTopic_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &DelTopicReq{}
	rsp := &DelTopicRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).DelTopic(ctx, reqbody.(*DelTopicReq), rspbody.(*DelTopicRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_GetTopicList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &GetTopicListReq{}
	rsp := &GetTopicListRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).GetTopicList(ctx, reqbody.(*GetTopicListReq), rspbody.(*GetTopicListRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func GZoneHttpInnerService_ClearAllData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

	req := &ClearAllDataReq{}
	rsp := &ClearAllDataRsp{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(GZoneHttpInnerService).ClearAllData(ctx, reqbody.(*ClearAllDataReq), rspbody.(*ClearAllDataRsp))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// GZoneHttpInnerServer_ServiceDesc descriptor for server.RegisterService
var GZoneHttpInnerServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "rstudio.gzone.GZoneHttpInner",
	HandlerType: ((*GZoneHttpInnerService)(nil)),
	Methods:     []server.Method{{Name: "/rstudio.gzone.GZoneHttpInner/Register", Func: GZoneHttpInnerService_Register_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/CreateOfficialAcount", Func: GZoneHttpInnerService_CreateOfficialAcount_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/GetOfficialAcountList", Func: GZoneHttpInnerService_GetOfficialAcountList_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/SetGameProfile", Func: GZoneHttpInnerService_SetGameProfile_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/SyncFriendList", Func: GZoneHttpInnerService_SyncFriendList_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/SetGlobalZoneConfig", Func: GZoneHttpInnerService_SetGlobalZoneConfig_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/SetTopicInfo", Func: GZoneHttpInnerService_SetTopicInfo_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/DelTopic", Func: GZoneHttpInnerService_DelTopic_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/GetTopicList", Func: GZoneHttpInnerService_GetTopicList_Handler}, {Name: "/rstudio.gzone.GZoneHttpInner/ClearAllData", Func: GZoneHttpInnerService_ClearAllData_Handler}},
}

// RegisterGZoneHttpInnerService register service
func RegisterGZoneHttpInnerService(s server.Service, svr GZoneHttpInnerService) {
	s.Register(&GZoneHttpInnerServer_ServiceDesc, svr)
}

/* ************************************ Client Definition ************************************ */

// GZoneHttpClientProxy defines service client proxy
type GZoneHttpClientProxy interface {
	Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error)

	SetZoneProfile(ctx context.Context, req *SetZoneProfileReq, opts ...client.Option) (rsp *SetZoneProfileRsp, err error)

	SetZoneConfig(ctx context.Context, req *SetZoneConfigReq, opts ...client.Option) (rsp *SetZoneConfigRsp, err error)

	GetProfile(ctx context.Context, req *GetProfileReq, opts ...client.Option) (rsp *GetProfileRsp, err error)

	PostMoment(ctx context.Context, req *PostMomentReq, opts ...client.Option) (rsp *PostMomentRsp, err error)

	GetMomentList(ctx context.Context, req *GetMomentListReq, opts ...client.Option) (rsp *GetMomentListRsp, err error)

	DelMoment(ctx context.Context, req *DelMomentReq, opts ...client.Option) (rsp *DelMomentRsp, err error)

	GetMomentByID(ctx context.Context, req *GetMomentByIdReq, opts ...client.Option) (rsp *GetMomentByIdRsp, err error)

	PostComment(ctx context.Context, req *PostCommentReq, opts ...client.Option) (rsp *PostCommentRsp, err error)

	DelComment(ctx context.Context, req *DelCommentReq, opts ...client.Option) (rsp *DelCommentRsp, err error)

	GetCommentList(ctx context.Context, req *GetCommentListReq, opts ...client.Option) (rsp *GetCommentListRsp, err error)

	PostMessage(ctx context.Context, req *PostMessageReq, opts ...client.Option) (rsp *PostMessageRsp, err error)

	DelMessage(ctx context.Context, req *DelMessageReq, opts ...client.Option) (rsp *DelMessageRsp, err error)

	GetMessageList(ctx context.Context, req *GetMessageListReq, opts ...client.Option) (rsp *GetMessageListRsp, err error)

	DoLike(ctx context.Context, req *DoLikeReq, opts ...client.Option) (rsp *DoLikeRsp, err error)

	DoStep(ctx context.Context, req *DoStepReq, opts ...client.Option) (rsp *DoStepRsp, err error)

	GetVisitorList(ctx context.Context, req *GetVisiterListReq, opts ...client.Option) (rsp *GetVisiterListRsp, err error)

	GetRankList(ctx context.Context, req *GetRankListReq, opts ...client.Option) (rsp *GetRankListRsp, err error)

	GetTopicList(ctx context.Context, req *GetTopicListReq, opts ...client.Option) (rsp *GetTopicListRsp, err error)

	SetAttention(ctx context.Context, req *SetAttentionReq, opts ...client.Option) (rsp *SetAttentionRsp, err error)

	SetBlackList(ctx context.Context, req *SetBlackListReq, opts ...client.Option) (rsp *SetBlackListRsp, err error)

	GetRelationList(ctx context.Context, req *GetRelationListReq, opts ...client.Option) (rsp *GetRelationListRsp, err error)

	GetUndealMsgCount(ctx context.Context, req *GetUndealMsgCountReq, opts ...client.Option) (rsp *GetUndealMsgCountRsp, err error)

	GetUndealMsg(ctx context.Context, req *GetUndealMsgReq, opts ...client.Option) (rsp *GetUndealMsgRsp, err error)

	ClearUndealMsg(ctx context.Context, req *ClearUndealMsgReq, opts ...client.Option) (rsp *ClearUndealMsgRsp, err error)
}

type gZoneHttpClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

func NewGZoneHttpClientProxy(opts ...client.Option) GZoneHttpClientProxy {
	return &gZoneHttpClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *gZoneHttpClientProxyImpl) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[0].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("Login")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &LoginRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) SetZoneProfile(ctx context.Context, req *SetZoneProfileReq, opts ...client.Option) (rsp *SetZoneProfileRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[1].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("SetZoneProfile")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetZoneProfileRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) SetZoneConfig(ctx context.Context, req *SetZoneConfigReq, opts ...client.Option) (rsp *SetZoneConfigRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[2].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("SetZoneConfig")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetZoneConfigRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetProfile(ctx context.Context, req *GetProfileReq, opts ...client.Option) (rsp *GetProfileRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[3].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetProfile")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetProfileRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) PostMoment(ctx context.Context, req *PostMomentReq, opts ...client.Option) (rsp *PostMomentRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[4].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("PostMoment")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &PostMomentRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetMomentList(ctx context.Context, req *GetMomentListReq, opts ...client.Option) (rsp *GetMomentListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[5].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetMomentList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetMomentListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) DelMoment(ctx context.Context, req *DelMomentReq, opts ...client.Option) (rsp *DelMomentRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[6].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("DelMoment")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DelMomentRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetMomentByID(ctx context.Context, req *GetMomentByIdReq, opts ...client.Option) (rsp *GetMomentByIdRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[7].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetMomentByID")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetMomentByIdRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) PostComment(ctx context.Context, req *PostCommentReq, opts ...client.Option) (rsp *PostCommentRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[8].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("PostComment")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &PostCommentRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) DelComment(ctx context.Context, req *DelCommentReq, opts ...client.Option) (rsp *DelCommentRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[9].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("DelComment")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DelCommentRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetCommentList(ctx context.Context, req *GetCommentListReq, opts ...client.Option) (rsp *GetCommentListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[10].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetCommentList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetCommentListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) PostMessage(ctx context.Context, req *PostMessageReq, opts ...client.Option) (rsp *PostMessageRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[11].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("PostMessage")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &PostMessageRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) DelMessage(ctx context.Context, req *DelMessageReq, opts ...client.Option) (rsp *DelMessageRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[12].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("DelMessage")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DelMessageRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetMessageList(ctx context.Context, req *GetMessageListReq, opts ...client.Option) (rsp *GetMessageListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[13].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetMessageList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetMessageListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) DoLike(ctx context.Context, req *DoLikeReq, opts ...client.Option) (rsp *DoLikeRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[14].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("DoLike")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DoLikeRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) DoStep(ctx context.Context, req *DoStepReq, opts ...client.Option) (rsp *DoStepRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[15].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("DoStep")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DoStepRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetVisitorList(ctx context.Context, req *GetVisiterListReq, opts ...client.Option) (rsp *GetVisiterListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[16].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetVisitorList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetVisiterListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetRankList(ctx context.Context, req *GetRankListReq, opts ...client.Option) (rsp *GetRankListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[17].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetRankList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetRankListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetTopicList(ctx context.Context, req *GetTopicListReq, opts ...client.Option) (rsp *GetTopicListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[18].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetTopicList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetTopicListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) SetAttention(ctx context.Context, req *SetAttentionReq, opts ...client.Option) (rsp *SetAttentionRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[19].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("SetAttention")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetAttentionRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) SetBlackList(ctx context.Context, req *SetBlackListReq, opts ...client.Option) (rsp *SetBlackListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[20].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("SetBlackList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetBlackListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetRelationList(ctx context.Context, req *GetRelationListReq, opts ...client.Option) (rsp *GetRelationListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[21].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetRelationList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetRelationListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetUndealMsgCount(ctx context.Context, req *GetUndealMsgCountReq, opts ...client.Option) (rsp *GetUndealMsgCountRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[22].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetUndealMsgCount")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetUndealMsgCountRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) GetUndealMsg(ctx context.Context, req *GetUndealMsgReq, opts ...client.Option) (rsp *GetUndealMsgRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[23].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("GetUndealMsg")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetUndealMsgRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpClientProxyImpl) ClearUndealMsg(ctx context.Context, req *ClearUndealMsgReq, opts ...client.Option) (rsp *ClearUndealMsgRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpServer_ServiceDesc.Methods[24].Name)
	msg.WithCalleeServiceName(GZoneHttpServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttp")
	msg.WithCalleeMethod("ClearUndealMsg")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &ClearUndealMsgRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// GZoneHttpInnerClientProxy defines service client proxy
type GZoneHttpInnerClientProxy interface {
	Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (rsp *RegisterRsp, err error)

	CreateOfficialAcount(ctx context.Context, req *CreateOfficialAcountReq, opts ...client.Option) (rsp *CreateOfficialAcountRsp, err error)

	GetOfficialAcountList(ctx context.Context, req *GetOfficialAcountListReq, opts ...client.Option) (rsp *GetOfficialAcountListRsp, err error)

	SetGameProfile(ctx context.Context, req *SetGameProfileReq, opts ...client.Option) (rsp *SetGameProfileRsp, err error)

	SyncFriendList(ctx context.Context, req *SyncFriendListReq, opts ...client.Option) (rsp *SyncFriendListRsp, err error)

	SetGlobalZoneConfig(ctx context.Context, req *SetGlobalZoneConfigReq, opts ...client.Option) (rsp *SetGlobalZoneConfigRsp, err error)

	SetTopicInfo(ctx context.Context, req *SetTopicInfoReq, opts ...client.Option) (rsp *SetTopicInfoRsp, err error)

	DelTopic(ctx context.Context, req *DelTopicReq, opts ...client.Option) (rsp *DelTopicRsp, err error)

	GetTopicList(ctx context.Context, req *GetTopicListReq, opts ...client.Option) (rsp *GetTopicListRsp, err error)

	ClearAllData(ctx context.Context, req *ClearAllDataReq, opts ...client.Option) (rsp *ClearAllDataRsp, err error)
}

type gZoneHttpInnerClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

func NewGZoneHttpInnerClientProxy(opts ...client.Option) GZoneHttpInnerClientProxy {
	return &gZoneHttpInnerClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *gZoneHttpInnerClientProxyImpl) Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (rsp *RegisterRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[0].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("Register")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &RegisterRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) CreateOfficialAcount(ctx context.Context, req *CreateOfficialAcountReq, opts ...client.Option) (rsp *CreateOfficialAcountRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[1].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("CreateOfficialAcount")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &CreateOfficialAcountRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) GetOfficialAcountList(ctx context.Context, req *GetOfficialAcountListReq, opts ...client.Option) (rsp *GetOfficialAcountListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[2].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("GetOfficialAcountList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetOfficialAcountListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) SetGameProfile(ctx context.Context, req *SetGameProfileReq, opts ...client.Option) (rsp *SetGameProfileRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[3].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("SetGameProfile")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetGameProfileRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) SyncFriendList(ctx context.Context, req *SyncFriendListReq, opts ...client.Option) (rsp *SyncFriendListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[4].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("SyncFriendList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SyncFriendListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) SetGlobalZoneConfig(ctx context.Context, req *SetGlobalZoneConfigReq, opts ...client.Option) (rsp *SetGlobalZoneConfigRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[5].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("SetGlobalZoneConfig")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetGlobalZoneConfigRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) SetTopicInfo(ctx context.Context, req *SetTopicInfoReq, opts ...client.Option) (rsp *SetTopicInfoRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[6].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("SetTopicInfo")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &SetTopicInfoRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) DelTopic(ctx context.Context, req *DelTopicReq, opts ...client.Option) (rsp *DelTopicRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[7].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("DelTopic")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &DelTopicRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) GetTopicList(ctx context.Context, req *GetTopicListReq, opts ...client.Option) (rsp *GetTopicListRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[8].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("GetTopicList")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &GetTopicListRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *gZoneHttpInnerClientProxyImpl) ClearAllData(ctx context.Context, req *ClearAllDataReq, opts ...client.Option) (rsp *ClearAllDataRsp, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(GZoneHttpInnerServer_ServiceDesc.Methods[9].Name)
	msg.WithCalleeServiceName(GZoneHttpInnerServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("GZoneHttpInner")
	msg.WithCalleeMethod("ClearAllData")

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &ClearAllDataRsp{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}
